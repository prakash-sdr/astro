/products:
  post:
    summary: Create a new product
    tags: [Products]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProductInput'
    responses:
      201:
        description: Product created successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                data:
                  $ref: '#/components/schemas/ProductResponse'

/products/fetch:
  post:
    summary: Retrieve all products
    tags: [Products]
    requestBody:
      required: false
      content:
        application/json:
          schema:
            type: object
            properties:
              filters:
                type: object
                description: MongoDB filter criteria
              projections:
                type: object
                description: Fields to include or exclude
              options:
                type: object
                description: Query options (e.g., sort, limit, skip)
    responses:
      200:
        description: List of all products
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemasProductResponse'
      400:
        description: Invalid request
      500:
        description: Server error

/products/{productId}:
  put:
    summary: Update an existing product
    tags: [Products]
    parameters:
      - in: path
        name: productId
        required: true
        schema:
          type: string
        description: The ID of the product to update
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProductInput'
    responses:
      200:
        description: Product updated successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                data:
                  $ref: '#/components/schemas/ProductResponse'
      404:
        description: Product not found

  get:
    summary: Retrieve a single product by ID
    tags: [Products]
    parameters:
      - in: path
        name: productId
        required: true
        schema:
          type: string
        description: The ID of the product to retrieve
    responses:
      200:
        description: Details of the requested product
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/ProductResponse' 
      404:
        description: Product not found
      500:
        description: Server error

  delete:
    summary: Delete a product by ID
    tags: [Products]
    parameters:
      - in: path
        name: productId
        required: true
        schema:
          type: string
        description: The ID of the product to delete
    responses:
      204:
        description: Product deleted successfully
      404:
        description: Product not found
      500:
        description: Server error
